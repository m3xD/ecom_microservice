version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: ecom-api-gateway
    ports:
      - "8080:8080"
    environment:
      - USER_SERVICE_URL=http://user-service:8000/api
      - PRODUCT_SERVICE_URL=http://product-service:8000/api
      - CART_SERVICE_URL=http://cart-service:8000/api
      - ORDER_SERVICE_URL=http://order-service:8000/api
      - PAYMENT_SERVICE_URL=http://payment-service:8000/api
    depends_on:
      - user-service
      - product-service
      - cart-service
      - order-service
      - payment-service
    networks:
      - ecommerce-network
    restart: always

  # User Service
  user-service:
    build: ./user_service
    container_name: ecom-user-service
    depends_on:
      - user-db
      - rabbitmq
    environment:
      - DB_NAME=user_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=user-db
      - DB_PORT=5432
      - SECRET_KEY=user_service_secret_key
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - user-static:/app/static
    networks:
      - ecommerce-network
    restart: always

  user-db:
    image: postgres:14
    container_name: ecom-user-db
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Product Service
  product-service:
    build: ./product_service
    container_name: ecom-product-service
    depends_on:
      - product-db
      - rabbitmq
    environment:
      - DB_NAME=product_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=product-db
      - DB_PORT=5432
      - SECRET_KEY=product_service_secret_key
      - DEBUG=True
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - product-static:/app/static
      - product-media:/app/media
    networks:
      - ecommerce-network
    restart: always

  product-db:
    image: postgres:14
    container_name: ecom-product-db
    environment:
      - POSTGRES_DB=product_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - product-db-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cart Service
  cart-service:
    build: ./cart_service
    container_name: ecom-cart-service
    depends_on:
      - cart-db
      - rabbitmq
      - product-service
    environment:
      - DB_NAME=cart_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=cart-db
      - DB_PORT=5432
      - SECRET_KEY=cart_service_secret_key
      - DEBUG=True
      - PRODUCT_SERVICE_URL=http://product-service:8000/api
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - cart-static:/app/static
    networks:
      - ecommerce-network
    restart: always

  cart-db:
    image: postgres:14
    container_name: ecom-cart-db
    environment:
      - POSTGRES_DB=cart_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - cart-db-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Service
  order-service:
    build: ./order_service
    container_name: ecom-order-service
    depends_on:
      - order-db
      - rabbitmq
      - product-service
      - user-service
      - cart-service
    environment:
      - DB_NAME=order_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=order-db
      - DB_PORT=5432
      - SECRET_KEY=order_service_secret_key
      - DEBUG=True
      - PRODUCT_SERVICE_URL=http://product-service:8000/api
      - USER_SERVICE_URL=http://user-service:8000/api
      - CART_SERVICE_URL=http://cart-service:8000/api
      - PAYMENT_SERVICE_URL=http://payment-service:8000/api
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - order-static:/app/static
    networks:
      - ecommerce-network
    restart: always

  order-db:
    image: postgres:14
    container_name: ecom-order-db
    environment:
      - POSTGRES_DB=order_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - order-db-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Payment Service
  payment-service:
    build: ./payment_service
    container_name: ecom-payment-service
    depends_on:
      - payment-db
      - rabbitmq
      - order-service
    environment:
      - DB_NAME=payment_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=payment-db
      - DB_PORT=5432
      - SECRET_KEY=payment_service_secret_key
      - DEBUG=True
      - ORDER_SERVICE_URL=http://order-service:8000/api
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - STRIPE_API_KEY=sk_test_example_key
      - PAYPAL_CLIENT_ID=test_client_id
      - PAYPAL_CLIENT_SECRET=test_client_secret
    volumes:
      - payment-static:/app/static
    networks:
      - ecommerce-network
    restart: always

  payment-db:
    image: postgres:14
    container_name: ecom-payment-db
    environment:
      - POSTGRES_DB=payment_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - payment-db-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ecom-rabbitmq
    ports:
      - "5672:5672"   # RabbitMQ port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - ecommerce-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx for static files and media (tùy chọn)
  nginx:
    image: nginx:alpine
    container_name: ecom-nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - user-static:/var/www/static/user
      - product-static:/var/www/static/product
      - cart-static:/var/www/static/cart
      - order-static:/var/www/static/order
      - payment-static:/var/www/static/payment
      - product-media:/var/www/media
    depends_on:
      - user-service
      - product-service
      - cart-service
      - order-service
      - payment-service
    networks:
      - ecommerce-network
    restart: always
  
  frontend:
    build: ./ecommerce-frontend
    container_name: ecom-frontend
    ports:
        - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    networks:
      - ecommerce-network
    depends_on:
      - api-gateway
    restart: always  

networks:
  ecommerce-network:
    driver: bridge

volumes:
  user-db-data:
  product-db-data:
  cart-db-data:
  order-db-data:
  payment-db-data:
  rabbitmq-data:
  user-static:
  product-static:
  cart-static:
  order-static:
  payment-static:
  product-media: